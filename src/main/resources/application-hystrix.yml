#
spring:
  cloud:
    circuitbreaker:
      hystrix:
        enabled: true
#
hystrix:
  command:
    default:
      #（▲）执行（控制HystrixCommand.run()如何执行）
      execution:
        timeout:
          #执行是否启用超时，默认启用true
          enabled: true
        #hystrix隔离策略，可选 THREAD 和 SEMAPHORE，默认是 THREAD,
        isolation:
          strategy: THREAD
          thread:
            #命令执行超时时间，默认1000ms，时间应该大于ribbon全部重试时间的总和
            timeoutInMilliseconds: 20000
            #发生超时是是否中断，默认true
            interruptOnTimeout: true
          semaphore:
            maxConcurrentRequests: 100
      #（▲）熔断（控制 HystrixCircuitBreaker 的行为）
      circuitBreaker:
        #用来跟踪circuit的健康性，如果未达标则让请求短路。默认true
        enabled: true
        #强制打开熔断器，如果打开这个开关，那么拒绝所有请求，默认false
        forceOpen: false
        #如果这个开关打开，circuit将一直关闭且忽略
        closedOpen: true
        #错误比率阀值，如果错误率>=该值，circuit会被打开，并短路所有请求触发fallback。默认50
        errorThresholdPercentage: 50
        #触发短路的时间值，当该值设为5000时，则当触发circuit break后的5000毫秒内都会拒绝request，也就是5000毫秒后才会关闭circuit
        sleepWindowInMilliseconds: 100
        #
        requestVolumeThreshold: 20
      #（▲）降级（控制HystrixCommand.getFallback()如何执行）
      fallback:
        enabled: false
        isolation:
          semaphore:
            maxConcurrentRequests: 50
